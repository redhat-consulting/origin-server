#!/usr/bin/env oo-ruby
#
# openshift-routing-xha-daemon  Starts the enhanced ha routing daemon for OpenShift
#
# chkconfig:       345 89 11
# processname:     openshift-routing-xha-daemon
#
# short-description: Starts the enhanced ha routing daemon for OpenShift
# description: This is a daemon which listens for notifications of
#               application lifecycle events on ActiveMQ from the
#               OpenShift Load Balancer plug-in and configures an external
#               Load Balancer appropriately.

require 'rubygems'
require 'daemons'
require 'timeout'
require 'openshift-origin-common/utils/path_utils'
require 'openshift/routing-xha/daemon'

Options = {
    :backtrace => true,
    :ontop => false,
    :log_output => true,
    :dir_mode => :system,
    :multiple => false,
    :script => 'openshift-routing-xha-daemon',
}

def daemon_running?
  %x[/usr/bin/pgrep -f '^openshift-routing-xha-daemon']
  $?.exitstatus == 0
end

def locked
  Timeout::timeout(ENV['LOCK_TIMEOUT'] || 60) do
    PathUtils.flock('/var/lock/openshift-routing-xha-daemon.lock') do
      yield
    end
  end
rescue Timeout::Error
  puts 'openshift-routing-xha-daemon operation timed out'
  exit! 1
end

def check_start
  # Wait for daemon to finish initilization
  sleep 3
  if daemon_running?
    puts 'OK'
    exit 0
  else
    puts 'FAIL'
    exit 1
  end
end

case ARGV[0]
  when 'stop'
    if daemon_running?
      locked  do
        puts 'Stopping openshift-routing-xha-daemon'
        Daemons.run_proc(Options[:script], Options)
      end
    else
      puts 'openshift-routing-xha-daemon is not running'
    end
  when 'start'
    if daemon_running?
      puts 'openshift-routing-xha-daemon is already running'
    else
      puts 'Starting openshift-routing-xha-daemon'
      locked  do
        Daemons.run_proc(Options[:script], Options) do
          OpenShift::RoutingDaemon.new.listen
        end
        check_start
      end
    end
  when 'restart'
    locked do
      if daemon_running?
        puts 'Stopping openshift-routing-xha-daemon'
        loop do
        Daemons.run(Options[:script], Options.merge(ARGV: ['stop']))
        break unless daemon_running?
        sleep 1
        $stdout.write '.'
        end
      else
        puts 'openshift-routing-xha-daemon is not running'
      end
      puts 'Starting openshift-routing-xha-daemon'
      Daemons.run_proc(Options[:script], Options.merge(ARGV: ['start'])) do
	OpenShift::RoutingDaemon.new.listen
      end
      check_start
    end
  when 'status'
    if daemon_running?
      puts 'openshift-routing-xha-daemon is running'
      exit 0
    else
      puts 'openshift-routing-xha-daemon is not running'
      exit 1
    end
  else
    locked { Daemons.run(Options[:script], Options) }
end
